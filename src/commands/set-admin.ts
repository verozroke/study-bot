import { MyContext } from '../types/bot'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()


export async function setAdmin(ctx: MyContext) {
  const parts = (ctx.message as any)?.text?.split(' ')
  if (!parts || parts.length !== 2) {
    return ctx.reply('‚ùó –§–æ—Ä–º–∞—Ç: /setadmin <—Å–µ–∫—Ä–µ—Ç>')
  }

  const [, secret] = parts

  if (secret !== process.env.ADMIN_SECRET) {
    return ctx.reply('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ.')
  }

  const user = ctx.from
  if (!user || !user.id) {
    return ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.')
  }

  try {
    await prisma.admin.deleteMany()
    await prisma.admin.create({
      data: {
        username: user.username ?? 'unknown',
        telegramId: user.id.toString(),
      }
    })

    return ctx.reply(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º.`)
  } catch (e: any) {
    if (e.code === 'P2002') {
      return ctx.reply('‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.')
    }

    console.error('–û—à–∏–±–∫–∞ –≤ setAdmin:', e)
    return ctx.reply('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞.')
  }
}