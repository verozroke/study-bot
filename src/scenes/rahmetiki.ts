// src/scenes/rahmetiki.ts
import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../types/bot'
import fs from 'fs'
import path from 'path'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const schools = [
  'BINOM - –∏–º. –ö.–°–∞—Ç–ø–∞–µ–≤–∞',
  'BINOM - –∏–º. –ê. –ë”©–∫–µ–π—Ö–∞–Ω–∞',
  'BINOM - –∏–º. “ö–∞–¥—ã—Ä –ú—ã—Ä–∑–∞ ”ò–ª—ñ',
  'BINOM - –∏–º. –ê. –ë–∞–π—Ç“±—Ä—Å—ã–Ω“±–ª—ã',
  'BINOM - –∏–º. –´. –ê–ª—Ç—ã–Ω—Å–∞—Ä–∏–Ω–∞',
  'BINOM - –∏–º. ”ò. –ö–µ–∫—ñ–ª–±–∞–µ–≤–∞',
  'BINOM - –∏–º. –î. “ö–æ–Ω–∞–µ–≤–∞',
  'BINOM - –∏–º. ”ò–ª-–§–∞—Ä–∞–±–∏',
  'Quantum TECH',
  'Quantum STEM',
  'Riviera',
  'Farabi –®—ã–º–∫–µ–Ω—Ç',
  'Farabi –ê—Ç—ã—Ä–∞—É',
  'BI Education'
]

const rahmetikScene = new Scenes.WizardScene<MyContext>(
  'rahmetiki-wizard',

  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏
  async (ctx) => {
    await ctx.reply(
      '–•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ‚Äî —Å—É–ø–µ—Ä! üòä –ü–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä—ã –∞–ª“ì—ã—Å–æ–≤ –≤ —á–∞—Ç–µ "–ê–ª“ì—ã—Å —Å”©–∑–¥–µ—Ä—ñ"!\n\n–£–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üìù –£–∫–∞–∑–∞—Ç—å –ò–º—è –∏ –§–∞–º–∏–ª–∏—é', 'manual_name')],
        [Markup.button.callback('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —é–∑–µ—Ä–Ω–µ–π–º–æ–º', 'share_contact')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ])
    )
    return ctx.wizard.next()
  },

  // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞
  async (ctx) => {
    const data = (ctx.update as any)?.callback_query?.data
    if (data === 'manual_name') {
      (ctx.wizard.state as any).mode = 'manual'
      await ctx.answerCbQuery()
      await ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è:')
      return ctx.wizard.selectStep(2)
    } else if (data === 'share_contact') {
      (ctx.wizard.state as any).mode = 'contact'
      await ctx.answerCbQuery()
      await ctx.reply('üì± –£–∫–∞–∂–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è:')
      return ctx.wizard.selectStep(3)
    }
    await ctx.reply('‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
  },

  // –®–∞–≥ 2.1: –ü–æ–ª—É—á–∞–µ–º –∏–º—è
  async (ctx) => {
    if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).recipient = (ctx.message as any).text
      await ctx.reply('üè´ –í –∫–∞–∫–æ–π —à–∫–æ–ª–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–ª“ì—ã—Å–∞?', Markup.keyboard(schools.map(name => [name])).oneTime().resize())
      return ctx.wizard.selectStep(4)
    }
    await ctx.reply('‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.')
  },

  // –®–∞–≥ 2.2: –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º
  async (ctx) => {
    if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).recipient = (ctx.message as any).text
      await ctx.reply('üè´ –í –∫–∞–∫–æ–π —à–∫–æ–ª–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–ª“ì—ã—Å–∞?', Markup.keyboard(schools.map(name => [name])).oneTime().resize())
      return ctx.wizard.next()
    }
    await ctx.reply('‚ùó –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @—é–∑–µ—Ä–Ω–µ–π–º.')
  },

  // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∫–æ–ª—ã
  async (ctx) => {
    if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).school = (ctx.message as any).text
      await ctx.reply(`–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –ø–æ–¥—É–º–∞–µ–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –∞–ª“ì—ã—Å –±–æ–ª–µ–µ —Ç—ë–ø–ª—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º üíå - —á—Ç–æ–±—ã –æ–Ω –æ—Ç—Ä–∞–∂–∞–ª –ø–æ—Å—Ç—É–ø–æ–∫ –∫–æ–ª–ª–µ–≥–∏, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π!

‚úçÔ∏è–ù–∞–ø–∏—à–∏ —á—Ç–æ —Å–¥–µ–ª–∞–ª(–∞) —Ç–≤–æ–π –∫–æ–ª–ª–µ–≥–∞?

üìå –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∞–ª –∫–æ–ª–ª–µ–≥—É, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –∏–¥–µ—é, –ø–æ–∫–∞–∑–∞–ª —É—Å–µ—Ä–¥–Ω–æ—Å—Ç—å, –ø–æ–¥–µ–ª–∏–ª—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ —Ç–¥.`)
      return ctx.wizard.next()
    }
    await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞.')
  },

  // –®–∞–≥ 3.1: –ß—Ç–æ —Å–¥–µ–ª–∞–ª
  async (ctx) => {
    if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).what = (ctx.message as any).text
      await ctx.reply(`‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ-–¥–≤–∞ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—è–≤–∏–ª(–∞) –∫–æ–ª–ª–µ–≥–∞?

üìå–ù–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Å—Ç–Ω–æ—Å—Ç—å, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å, –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –∫–æ–º–∞–Ω–¥–Ω—ã–π –¥—É—Ö, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ç–¥.`)
      return ctx.wizard.next()
    }
    await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.')
  },

  // –®–∞–≥ 3.2: –ö–∞—á–µ—Å—Ç–≤–∞
  async (ctx) => {
    if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).qualities = (ctx.message as any).text
      await ctx.reply(`‚úçÔ∏è –ù–∞–ø–∏—à–∏, —á–µ–º —ç—Ç–æ –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ, –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —à–∫–æ–ª–µ? 

üìå–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–µ–∫—Ç, —Å–ø–ª–æ—Ç–∏–ª–∞—Å—å –∫–æ–º–∞–Ω–¥–∞, —É—á–µ–Ω–∏–∫–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ª—É—á—à–∏–π –æ–ø—ã—Ç, –ø–æ—è–≤–∏–ª–∞—Å—å —è—Å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö, —É–ª—É—á—à–∏–ª—Å—è –ø—Ä–æ–µ–∫—Ç, —É–∑–Ω–∞–ª–∏ –±–æ–ª—å—à–µ –æ... –∏ —Ç–¥.`)
      return ctx.wizard.next()
    }
    await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.')
  },

  // –®–∞–≥ 3.3: –†–µ–∑—É–ª—å—Ç–∞—Ç
  async (ctx) => {
    if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).impact = (ctx.message as any).text
      await ctx.reply(`–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –æ—Ç–∫—Ä—ã—Ç–∫—É! üéÅ
–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ–µ–≥–æ –∫–æ–ª–ª–µ–≥—É –∏ —Ç–æ, –∑–∞ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –µ–≥–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å ‚Äî –º—ã –ø–æ–¥–±–µ—Ä—ë–º –æ—Ç–∫—Ä—ã—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è —ç—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç üåü`, Markup.inlineKeyboard([
        [Markup.button.callback('–ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å', 'style_decency')],
        [Markup.button.callback('–≠–º–ø–∞—Ç–∏—è', 'style_customer')],
        [Markup.button.callback('–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', 'style_team')],
        [Markup.button.callback('–£—Å–µ—Ä–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', 'style_work')],
        [Markup.button.callback('–ú—ã - –ª—É—á—à–∞—è –∫–æ–º–∞–Ω–¥–∞', 'style_kaizen')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ]))
      return ctx.wizard.next()
    }
    await ctx.reply('‚ùó –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.')
  },

  // –®–∞–≥ 4: –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
  async (ctx) => {
    const data = (ctx.update as any)?.callback_query?.data
    if (!data) {
      await ctx.reply('‚ùó –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.')
      return
    }

    (ctx.wizard.state as any).style = data.replace('style_', '')
    await ctx.answerCbQuery()
    await ctx.reply('‚ú® –ü–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö ‚Äî –æ—Ç –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–∫—Ä—ã—Ç–∫—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–π–¥–∞–Ω–∞)')
    return ctx.wizard.next()
  },

  // –®–∞–≥ 5: –û—Ç –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É
  async (ctx) => {
    if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).sender = (ctx.message as any).text

      const {
        recipient, school, what, qualities, impact,
        style, sender
      } = ctx.wizard.state as any

      const styleToImage: Record<string, string> = {
        decency: 'decency.png',
        customer: 'customer.png',
        team: 'team.png',
        work: 'work.png',
        kaizen: 'kaizen.png'
      }

      const imageFileName = styleToImage[style]
      if (!imageFileName) {
        await ctx.reply('‚ùó –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å.')
        return ctx.scene.leave()
      }

      const imagePath = path.resolve(__dirname, '..', 'assets', 'rahmetiki', imageFileName)
      const caption = `
      üåü *–ê–ª“ì—ã—Å –±—ñ–ª–¥—ñ—Ä–µ–º—ñ–Ω!*
üë§ *–ö–æ–º—É:* ${recipient} 
üè´ *–®–∫–æ–ª–∞:* ${school}

${what}!
–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ—è–≤–∏–ª ${qualities}!
${impact}!

*‚úçÔ∏è ${sender}*
      `


      const channel = await prisma.channel.findFirst()
      if (!channel || !channel.groupId || !channel.messageThreadId) {
        await ctx.reply('‚ùó –ö–∞–Ω–∞–ª –∏–ª–∏ —Ç—Ä–µ–¥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel.')
        return ctx.scene.leave()
      }

      await ctx.telegram.sendPhoto(channel.groupId.toString(), {
        source: fs.readFileSync(imagePath)
      }, {
        caption,
        parse_mode: 'Markdown',
        // message_thread_id: channel.messageThreadId
      })

      await ctx.reply('‚úÖ –†–∞—Ö–º–µ—Ç–∏–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ üôè')
      return ctx.scene.leave()
    }

    await ctx.reply('‚ùó –í–≤–µ–¥–∏ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.')
  }
)

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
rahmetikScene.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
  await ctx.reply('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard())
  return ctx.scene.leave()
})

rahmetikScene.action('cancel', async (ctx) => {
  await ctx.answerCbQuery()
  await ctx.reply('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
  return ctx.scene.leave()
})

export default rahmetikScene
