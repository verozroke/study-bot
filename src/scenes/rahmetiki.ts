import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../types/bot'
import fs from 'fs'
import path from 'path'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const rahmetikScene = new Scenes.WizardScene<MyContext>(
  'rahmetiki-wizard',

  // –®–∞–≥ 1: –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
  async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ä–∞—Ö–º–µ—Ç–∏–∫–∞:', Markup.inlineKeyboard([
      [Markup.button.callback('–ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å', 'style_decency')],
      [Markup.button.callback('–°—á–∞—Å—Ç—å–µ –∫–ª–∏–µ–Ω—Ç–∞', 'style_customer')],
      [Markup.button.callback('–õ—É—á—à–∞—è –∫–æ–º–∞–Ω–¥–∞ ', 'style_team')],
      [Markup.button.callback('–£—Å–µ—Ä–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', 'style_work')],
      [Markup.button.callback('–ö–∞–π–¥–∑–µ–Ω', 'style_kaizen')],
    ]))
    return ctx.wizard.next()
  },

  // –®–∞–≥ 2: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
  async (ctx) => {
    const data = (ctx.update as any)?.callback_query?.data
    if (!data) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.')
      return
    }

    (ctx.wizard.state as any).style = data.replace('style_', '')
    await ctx.answerCbQuery()
    await ctx.reply('–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Ö–º–µ—Ç–∏–∫? (–ò–º—è)')
    return ctx.wizard.next()
  },

  // –®–∞–≥ 3: –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      (ctx.wizard.state as any).recipient = ctx.message.text
      await ctx.reply('–ó–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã? (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)')
      return ctx.wizard.next()
    }
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.')
  },

  // –®–∞–≥ 4: —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      (ctx.wizard.state as any).message = ctx.message.text.slice(0, 100)

      const { style, recipient, message } = ctx.wizard.state as any
      const styleToImage: Record<string, string> = {
        decency: 'decency.png',
        customer: 'customer.png',
        team: 'team.png',
        work: 'work.png',
        kaizen: 'kaizen.png'
      }

      const imageFileName = styleToImage[style ?? '']
      if (!imageFileName) {
        await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å.')
        return ctx.scene.leave()
      }

      const imagePath = path.resolve(__dirname, '..', 'assets', 'rahmetiki', imageFileName)
      const caption = `üåü *–†–∞—Ö–º–µ—Ç–∏–∫!*\nüë§ *–ö–æ–º—É:* ${recipient}\nüôè *–ó–∞ —á—Ç–æ:* ${message}`

      const channel = await prisma.channel.findFirst()

      if (!channel || !channel.username) {
        await ctx.reply('‚ùó –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set-channel —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.')
        return ctx.scene.leave()
      }

      await ctx.telegram.sendPhoto(`@${channel.username}`, { source: fs.readFileSync(imagePath) }, {
        caption,
        parse_mode: 'Markdown'
      })

      await ctx.reply('‚úÖ –í–∞—à —Ä–∞—Ö–º–µ—Ç–∏–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å –¥–æ–±—Ä–æ—Ç–æ–π üôè')
      return ctx.scene.leave()
    }

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).')
  }
)

export default rahmetikScene
