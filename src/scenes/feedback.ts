import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../types/bot'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const typeMap = {
  'suggestion': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
  'idea': '–ò–¥–µ—è',
  'problem': '–ü—Ä–æ–±–ª–µ–º–∞ / –ñ–∞–ª–æ–±–∞',
}

const feedbackScene = new Scenes.WizardScene<MyContext>(
  'feedback-wizard',

  // –®–∞–≥ 1: –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è
  async (ctx) => {
    await ctx.reply('üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:', Markup.inlineKeyboard([
      [Markup.button.callback('üìà –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é', 'type_suggestion')],
      [Markup.button.callback('üí° –ò–¥–µ—è', 'type_idea')],
      [Markup.button.callback('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ / –ñ–∞–ª–æ–±–∞', 'type_problem')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]))
    return ctx.wizard.next()
  },

  // –®–∞–≥ 2: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
  async (ctx) => {
    if ('callback_query' in ctx.update && (ctx.update.callback_query as any).data) {
      (ctx.wizard.state as any).type = (ctx.update.callback_query as any).data.replace('type_', '')
      await ctx.answerCbQuery()
      await ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):', Markup.keyboard([
        ['‚ùå –û—Ç–º–µ–Ω–∞']
      ]).oneTime().resize())
      return ctx.wizard.next()
    }
  },

  // –®–∞–≥ 3: —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–ª–∏ –Ω–µ—Ç
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      (ctx.wizard.state as any).text = ctx.message.text.slice(0, 500)
      await ctx.reply('üë§ –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –∏–º—è?', Markup.inlineKeyboard([
        [Markup.button.callback('–î–∞', 'show_name')],
        [Markup.button.callback('–ù–µ—Ç', 'anonymous')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]

      ]))
      return ctx.wizard.next()
    }
  },

  // –®–∞–≥ 4: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞/–Ω–µ—Ç
  async (ctx) => {
    if ('callback_query' in ctx.update) {
      const action = (ctx.update.callback_query as any).data
      await ctx.answerCbQuery()

      if (action === 'show_name') {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —à–∫–æ–ª—É –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', Markup.keyboard([
          ['‚ùå –û—Ç–º–µ–Ω–∞']
        ]).oneTime().resize())
        return ctx.wizard.next()
      } else {
        (ctx.wizard.state as any).sender = '–ê–Ω–æ–Ω–∏–º'
        return sendFeedback(ctx)
      }
    }
  },

  // –®–∞–≥ 5: –∏–º—è –≤—Ä—É—á–Ω—É—é
  async (ctx) => {
    if (ctx.message && 'text' in ctx.message) {
      (ctx.wizard.state as any).sender = ctx.message.text
      return sendFeedback(ctx)
    }
  }
)

async function sendFeedback(ctx: MyContext) {
  const { type, text, sender } = ctx.wizard.state as any

  const admin = await prisma.admin.findFirst()
  console.log(admin)
  if (!admin) {
    await ctx.reply('‚ùó –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
    return ctx.scene.leave()
  }


  const msg = `üì• *–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ*

üìå –¢–∏–ø: ${typeMap[type as keyof typeof typeMap]}\n
              
üí¨ –¢–µ–∫—Å—Ç: ${text}\n
              
üë§ –û—Ç: ${sender ?? '–ê–Ω–æ–Ω–∏–º'}`
  await ctx.telegram.sendMessage(admin.telegramId, msg, { parse_mode: 'Markdown' })

  await ctx.reply('‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ HR-–∫–æ–º–∞–Ω–¥–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å!')
  return ctx.scene.leave()
}


feedbackScene.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
  await ctx.reply('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard())
  return ctx.scene.leave()
})

feedbackScene.action('cancel', async (ctx) => {
  await ctx.answerCbQuery()
  await ctx.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
  return ctx.scene.leave()
})


export default feedbackScene
