// src/scenes/mediator.ts
import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../types/bot'
import { query } from '../utils/genai/query'
import { generatePrompt } from '../utils/genai/prompt'
import { splitMessage } from '../utils/split-messages'
import path from 'path'
import axios from 'axios'
import fs from 'fs'
import { getTranscript, upload } from '../utils/genai/voice'

const mediatorScene = new Scenes.WizardScene<MyContext>(
  'mediator-wizard',

  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
  async (ctx) => {
    await ctx.reply('üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏:', Markup.inlineKeyboard([
      [Markup.button.callback('üßë‚Äçüéì –° —É—á–µ–Ω–∏–∫–æ–º', 'student')],
      [Markup.button.callback('üë®‚Äçüë©‚Äçüëß –° —Ä–æ–¥–∏—Ç–µ–ª–µ–º', 'parent')],
      [Markup.button.callback('üßë‚Äçü§ù‚Äçüßë –° –∫–æ–ª–ª–µ–≥–æ–π', 'colleague')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]))
    return ctx.wizard.next()
  },

  // –®–∞–≥ 2: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)
  async (ctx) => {
    const data = (ctx.callbackQuery as any)?.data
    if (!data) return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏.');
    (ctx.wizard.state as any).type = data

    await ctx.reply('üìù –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤).', Markup.keyboard([
      ['‚ùå –û—Ç–º–µ–Ω–∞']
    ]).oneTime().resize())
    return ctx.wizard.next()
  },

  // –®–∞–≥ 3: –û—Ç–≤–µ—Ç
  async (ctx) => {
    let voicePath: string | null = null
    if ('voice' in (ctx.message || {})) {

      const voice = (ctx.message as any).voice;
      const fileId = voice.file_id;

      // –ü–æ–ª—É—á–∞–µ–º file_path –æ—Ç Telegram
      const fileInfo = await ctx.telegram.getFile(fileId)
      const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${fileInfo.file_path}`

      // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .ogg
      const fileName = `${fileId}.ogg`
      voicePath = path.join(__dirname, '..', 'temp', fileName)

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const response = await axios.get(fileUrl, { responseType: 'stream' })
      await new Promise((resolve, reject) => {
        const stream = fs.createWriteStream(voicePath as string)
        response.data.pipe(stream)
        //@ts-ignore
        stream.on('finish', resolve)
        stream.on('error', reject)
      })

      const file = await upload(voicePath)
      const transcript = await getTranscript(file);
      (ctx.wizard.state as any).context = transcript

    } else if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).context = (ctx.message as any).text;

    } else {

      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    }

    const state = ctx.wizard.state as any
    const propmpt = generatePrompt({ category: state.type, context: state.context })
    const message = await query(propmpt)

    console.log(message)
    const parts = splitMessage(message)
    for (const part of parts) {
      await ctx.reply(part, { parse_mode: 'HTML' })
    }

    await ctx.reply('üìä –ë—ã–ª –ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?', Markup.inlineKeyboard([
      [Markup.button.callback('üëç –î–∞', 'feedback_yes')],
      [Markup.button.callback('üëé –ù–µ—Ç', 'feedback_no')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]))


    return ctx.wizard.next()
  },
  async (ctx) => {
    const feedback = (ctx.callbackQuery as any)?.data

    if (feedback === 'feedback_yes') {
      await ctx.reply('üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ç–æ—Ä–∞! –ù–∞–¥–µ–µ–º—Å—è, –º—ã –ø–æ–º–æ–≥–ª–∏.')
      return ctx.scene.leave()
    }

    if (feedback === 'feedback_no') {
      await ctx.reply('üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º.')
      return ctx.wizard.selectStep(2) // –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —à–∞–≥ —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞/–∞—É–¥–∏–æ
    }

    return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".')
  }
)


mediatorScene.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
  await ctx.reply('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard())
  return ctx.scene.leave()
})

mediatorScene.action('cancel', async (ctx) => {
  await ctx.answerCbQuery()
  await ctx.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
  return ctx.scene.leave()
})


export default mediatorScene
