// src/scenes/mediator.ts
import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../types/bot'

const mediatorScene = new Scenes.WizardScene<MyContext>(
  'mediator-wizard',

  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
  async (ctx) => {
    await ctx.reply('üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏:', Markup.inlineKeyboard([
      [Markup.button.callback('üßë‚Äçüéì –° —É—á–µ–Ω–∏–∫–æ–º', 'student')],
      [Markup.button.callback('üë®‚Äçüë©‚Äçüëß –° —Ä–æ–¥–∏—Ç–µ–ª–µ–º', 'parent')],
      [Markup.button.callback('üßë‚Äçü§ù‚Äçüßë –° –∫–æ–ª–ª–µ–≥–æ–π', 'colleague')],
    ]))
    return ctx.wizard.next()
  },

  // –®–∞–≥ 2: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)
  async (ctx) => {
    const data = (ctx.callbackQuery as any)?.data
    if (!data) return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏.');
    (ctx.wizard.state as any).type = data

    await ctx.reply('üìù –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤).')
    return ctx.wizard.next()
  },

  // –®–∞–≥ 3: –û—Ç–≤–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞)
  async (ctx) => {
    if ('voice' in (ctx.message || {})) {
      const voice = (ctx.message as any).voice;
      // –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

      console.log('–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', voice.file_id);
      (ctx.wizard.state as any).context = '[–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]';
    } else if ('text' in (ctx.message || {})) {
      (ctx.wizard.state as any).context = (ctx.message as any).text;
    } else {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    }

    await ctx.reply('ü§ñ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–ò–ò –ø–æ–¥—Å–∫–∞–∑–∫–∞)')

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω—É
    return ctx.scene.leave()
  }
)

export default mediatorScene
