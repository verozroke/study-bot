// src/scenes/achievements.ts
import { Scenes, Markup } from 'telegraf'
import { MyContext } from '../types/bot'
import { PrismaClient } from '@prisma/client'
import { escapeMarkdownV2 } from '../utils/escape'
const u = (s: string) => escapeMarkdownV2(s);
const prisma = new PrismaClient()
const schools = [
  'BINOM ‚Äì –∏–º. –ö.–°–∞—Ç–ø–∞–µ–≤–∞', 'BINOM ‚Äì –∏–º. –ê. –ë”©–∫–µ–π—Ö–∞–Ω–∞', 'BINOM ‚Äì –∏–º. “ö–∞–¥—ã—Ä –ú—ã—Ä–∑–∞ ”ò–ª—ñ',
  'BINOM ‚Äì –∏–º. –ê. –ë–∞–π—Ç“±—Ä—Å—ã–Ω“±–ª—ã', 'BINOM ‚Äì –∏–º. –´. –ê–ª—Ç—ã–Ω—Å–∞—Ä–∏–Ω–∞', 'BINOM ‚Äì –∏–º. ”ò. –ö–µ–∫—ñ–ª–±–∞–µ–≤–∞',
  'BINOM ‚Äì –∏–º. –î. “ö–æ–Ω–∞–µ–≤–∞', 'BINOM ‚Äì –∏–º. ”ò–ª-–§–∞—Ä–∞–±–∏', 'Quantum TECH', 'Quantum STEM',
  'Riviera Intellectual School', 'Farabi –®—ã–º–∫–µ–Ω—Ç', 'Farabi –ê—Ç—ã—Ä–∞—É', 'BI Education'
]

const achievementScene = new Scenes.WizardScene<MyContext>(
  'achievement-wizard',

  // 0. –§–ò–û –∏ –Ω–æ–º–µ—Ä
  async (ctx) => {
    await ctx.reply(
      'üìå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
      Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞']]).oneTime().resize()
    )
    return ctx.wizard.next()
  },

  // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û+—Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí —à–∫–æ–ª–∞
  async (ctx) => {
    if (!(ctx.message as any).text) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –§–ò–û –∏ –Ω–æ–º–µ—Ä.')
    }
    ; (ctx.wizard.state as any).fullNamePhone = (ctx.message as any).text
    await ctx.reply(
      'üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —à–∫–æ–ª—É:',
      Markup.keyboard(schools.map(s => [s])).oneTime().resize()
    )
    return ctx.wizard.next()
  },

  // 2. –®–∫–æ–ª–∞ ‚Üí –¥–æ–ª–∂–Ω–æ—Å—Ç—å
  async (ctx) => {
    if (!(ctx.message as any).text || !schools.includes((ctx.message as any).text)) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞.')
    }
    ; (ctx.wizard.state as any).school = (ctx.message as any).text
    await ctx.reply(
      'üë®‚Äçüè´ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:',
      Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞']]).oneTime().resize()
    )
    return ctx.wizard.next()
  },

  // 3. –î–æ–ª–∂–Ω–æ—Å—Ç—å ‚Üí —á—Ç–æ —Å–¥–µ–ª–∞–ª
  async (ctx) => {
    if (!(ctx.message as any).text) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.')
    }
    ; (ctx.wizard.state as any).position = (ctx.message as any).text
    await ctx.reply(
      `üì£ –î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ —Ç–≤–æ–µ–π –∏–¥–µ–µ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–µ, —á—Ç–æ–±—ã —ç—Ç–æ —Å—Ç–∞–ª–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏ –ø–æ–º–æ–≥–ª–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫—É–ª—å—Ç—É—Ä—É –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º –≤ –Ω–∞—à–µ–π —à–∫–æ–ª–µ üòä

‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, –≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–ª–∞—Å—å –∏–¥–µ—è –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç?`,
      Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞']]).oneTime().resize()
    )
    return ctx.wizard.next()
  },

  // 4.1 –ß—Ç–æ —Å–¥–µ–ª–∞–ª ‚Üí —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
  async (ctx) => {
    if (!(ctx.message as any).text) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–µ.')
    }
    ; (ctx.wizard.state as any).what = (ctx.message as any).text
    await ctx.reply(
      `‚úèÔ∏è –û–ø–∏—à–∏, –∫–∞–∫–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—ã –∑–∞–º–µ—Ç–∏–ª(–∞) –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–≤–æ–µ–π –∏–¥–µ–∏/–ø—Ä–æ–µ–∫—Ç–∞?

üìå –ù–∞–ø—Ä–∏–º–µ—Ä: –î–µ—Ç–∏ —Å—Ç–∞–ª–∏ –æ–±—Å—É–∂–¥–∞—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤–Ω–µ —É—Ä–æ–∫–æ–≤‚Ä¶`,
      Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞']]).oneTime().resize()
    )
    return ctx.wizard.next()
  },

  // 4.2 –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Üí –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å
  async (ctx) => {
    if (!(ctx.message as any).text) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.')
    }
    ; (ctx.wizard.state as any).impact = (ctx.message as any).text
    await ctx.reply(
      `üìé –ü–æ–¥–µ–ª–∏—Å—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª–æ–º (.pptx .pdf .docx .xlsx .txt) ‚Äì 
- –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è  
- –ø–æ—Å—Ç–µ—Ä –∏–ª–∏ —Å—Ö–µ–º–∞  
- —Å–ª–∞–π–¥ –∏–∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏`,
      Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∞']]).oneTime().resize()
    )
    return ctx.wizard.next()
  },

  // 5. –§–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
  async (ctx) => {
    const state = ctx.wizard.state as any

    // —Ñ–æ—Ç–æ
    if ((ctx.message as any).photo) {
      const photo = (ctx.message as any).photo.at(-1)!
      state.fileType = 'photo'
      state.fileId = photo.file_id

      // –¥–æ–∫—É–º–µ–Ω—Ç
    } else if ((ctx.message as any).document) {
      const doc = (ctx.message as any).document
      const ext = doc.file_name?.split('.').pop()?.toLowerCase()
      if (!ext || !['pptx', 'pdf', 'docx', 'xlsx', 'txt'].includes(ext)) {
        return ctx.reply('‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.')
      }
      state.fileType = 'document'
      state.fileId = doc.file_id
      state.fileName = doc.file_name
    } else {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª.')
    }

    // —Å—Ç—Ä–æ–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    const { fullNamePhone, school, position, what, impact, fileType, fileName } = state
    let text =
      `üìã *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n` +
      `üë§ ${u(fullNamePhone)}\n` +
      `üè´ ${u(school)}\n` +
      `üëî ${u(position)}\n\n` +
      `‚úçÔ∏è *–ß—Ç–æ:* ${u(what)}\n` +
      `‚úèÔ∏è *–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:* ${u(impact)}\n\n`;
    text += fileType === 'photo'
      ? `üì∑ –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ`
      : `üìÑ –§–∞–π–ª: ${u(fileName || '')}`;

    await ctx.reply(text, {
      parse_mode: 'MarkdownV2',
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'send')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')],
      ]).reply_markup
    })
    return ctx.wizard.next()
  }
)

// Confirm / Cancel
achievementScene.action('send', async (ctx) => {
  const state = ctx.wizard.state as any
  const admin = await prisma.admin.findFirst()

  if (!admin) {
    await ctx.reply('‚ùó –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    return ctx.scene.leave()
  }

  const summary =
    `üìã *–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ*\n\n` +
    `üë§ ${u(state.fullNamePhone)}\n` +
    `üè´ ${u(state.school)}\n` +
    `üëî ${u(state.position)}`

  const details =
    `‚úçÔ∏è *–ß—Ç–æ:*\n${u(state.what)}\n\n` +
    `‚úèÔ∏è *–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:*\n${u(state.impact)}`

  if (state.fileType === 'photo') {
    await ctx.telegram.sendPhoto(admin.telegramId, state.fileId, {
      caption: summary,
      parse_mode: 'MarkdownV2'
    })
    await ctx.telegram.sendMessage(admin.telegramId, details, {
      parse_mode: 'MarkdownV2'
    })
  } else if (state.fileType === 'document') {
    await ctx.telegram.sendDocument(admin.telegramId, state.fileId, {
      caption: summary + `\n\nüìÑ ${u(state.fileName)}`,
      parse_mode: 'MarkdownV2'
    })
    await ctx.telegram.sendMessage(admin.telegramId, details, {
      parse_mode: 'MarkdownV2'
    })
  }

  await ctx.reply('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!')
  return ctx.scene.leave()
})

achievementScene.action('cancel', async (ctx) => {
  await ctx.answerCbQuery()
  await ctx.reply('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard())
  return ctx.scene.leave()
})
achievementScene.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
  await ctx.reply('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard())
  return ctx.scene.leave()
})

export default achievementScene
